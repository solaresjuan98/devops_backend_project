name: Publish Chat app Frontend image to GCR - Production environment
# create simple trigger based on everytime we make change to this repository
on:
  push:
    tags:
      - v**
    # branches:
    #  - develop
  pull_request:

    types:
      - closed

    branches:
      #- develop  # Set a branch to deploy
      # - main
      - 'production'

#define jobs
jobs:
  Deploy:
    runs-on: ubuntu-latest #run this workflow on ubuntu instance
    permissions: #make sure we add permission to read and write package
      contents: read
      packages: write
    steps:
      - name: Checkout Code
        uses: actions/checkout@v1 #checkouts your repo, so this workflow can access it

      - name: Log in to GHCR
        env:
            REGISTRY: ghcr.io #create env called REGISTRY
        uses: docker/login-action@f054a8b539a109f9f41c372932f1ae047eff08c9
        with:
            registry: ${{ env.REGISTRY }} #parse REGISTRY env value to here. Make sure it is correctly stating ghcr.io
            username: ${{ github.actor }} #this will be our github account
            password: ${{ secrets.CR_PAT }} #parse the value of repository secret called CR_PAT that we have created earlier
      - name: Login to GCR
        env:
          PROJECT_ID: finalproject-tp-production #create env called PROJECT_ID consisted of our actual GCP Project ID
        uses: google-github-actions/setup-gcloud@v0.3.0 #checkouts GCR repo, so this workflow can access it
        with:
          service_account_key: ${{ secrets.SERVICE_ACCOUNT_KEY_PRODUCTION }} #parse the value of repository secret called SERVICE_ACCOUNT_KEY that we have created earlier
          project_id: ${{ env.PROJECT_ID }} #parse the value of env called PROJECT_ID
          export_default_credentials: true
          
      - name: Build Docker Image
        env:
          IMAGE_NAME: chatappfrontend #create env called IMAGE_NAME consisted of actual name of Docker Image after we build
          PROJECT_ID: finalproject-tp-production
        run: |
          cd chat-app
          docker build -t $IMAGE_NAME:latest . #build the docker image
        
      - name: Configure Docker Client
        run:  |-
          gcloud auth configure-docker --quiet #authenticate to gcr
        
      - name: Push Docker Image to Container Registry GCR
        env: 
          IMAGE_NAME: chatappfrontend
          PROJECT_ID: finalproject-tp-production
        #tag docker image to gcr image format then push to gcr
        run: |-
          cd chat-app
          docker tag $IMAGE_NAME:latest gcr.io/$PROJECT_ID/$IMAGE_NAME:latest 
          docker push gcr.io/$PROJECT_ID/$IMAGE_NAME:latest 